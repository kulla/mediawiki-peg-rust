# This document specifies valid MFNF wiki syntax.
# It serves as documentation and is used to generate tests for the parser.
# The whole document is structured as an array of tests cases:
#
# - case: descriptive name of a test here.
#   in: |
#     Here goes the input ''wikitext'' to parse.
#   out:
#     type: document
#     offset: 0
#     content:
#       - type: paragraph
#         ...
#
# If the position of an element is not important for the test,
# you may ommit its position info:
# 
# ...
# type: paragraph
# position: {}
# content: []

# An empty document should parse fine.
  - case: empty document
    input: ""
    out:
      type: document
      position:
        start:
          offset: 0
          line: 1
          col: 1
        end:
          offset: 0
          line: 1
          col: 1
      content: []

# A single paragraph without newlines should be parsed as a document
# with a single paragraph.
  - case: single unicode paragraph
    input: this is a äüöß == test. "" ʕ•ᴥ•ʔ
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: text
              position: {}
              text: this is a äüöß == test. "" ʕ•ᴥ•ʔ
              
# A single paragraph with some special characters.
  - case: special chars in inline context
    input: hey!!! this is a test! <3 |x|
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: text
              position: {}
              text: "hey!!! this is a test! <3 |x|"
              
# two simple headings.
  - case: two simple headings
    input: |
      == Heading 1 ==
      === Heading 2
      === Heading 3
    out:
      type: document
      position: {}
      content:
        - type: heading
          position: {}
          depth: 2
          caption:
            - type: text
              position: {}
              text: "Heading 1 "
          content: []
        - type: heading
          position: {}
          depth: 3
          caption:
            - type: text
              position: {}
              text: "Heading 2"
          content: []
        - type: heading
          position: {}
          depth: 3
          caption:
            - type: text
              position: {}
              text: "Heading 3"
          content: []
          
# heading with an ancor
  - case: heading with ancor
    input: |
      == Heading {{Anker|foo}} ==
    out:
      type: document
      position: {}
      content:
        - type: heading
          position: {}
          depth: 2
          caption:
            - type: text
              position: {}
              text: "Heading "
            - type: template
              position: {}
              name: Anker
              content:
                - type: templateargument
                  position: {}
                  name: ""
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: foo
            - type: text
              position: {}
              text: " "
          content: []
          
# A paragraph with bold words contains a plain formatted element
# wrapped by ''italic'' formatting.
  - case: single italic text
    input: "''this is italic''"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: italic
              content:
                - type: text
                  position: {}
                  text: this is italic

# A paragraph with bold words contains a plain formatted element
# wrapped by '''bold''' formatting.
  - case: single bold text
    input: "'''this is bold'''"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: bold
              content: 
                - type: text
                  position: {}
                  text: this is bold

# A paragraph with nested markup.
  - case: nested markup italic
    input: "prelude ''italic paragraph with '''''nested'' bold and italic''''' and normal text."
    out:
        type: document
        position: {} 
        content: 
          - type: paragraph
            position: {}
            content: 
              - type: text
                position: {}
                text: "prelude "
              - type: formatted
                position: {}
                markup: italic
                content: 
                  - type: text
                    position: {}
                    text: "italic paragraph with "
                
                  - type: formatted
                    position: {}
                    markup: bold
                    content: 
                      - type: formatted
                        position: {} 
                        markup: italic
                        content: 
                          - type: text
                            position: {}
                            text: nested
                      - type: text
                        position: {} 
                        text: " bold and italic"
              - type: text
                position: {}
                text: " and normal text."

# An apostrophe after markup
  - case: markup and apostrophe
    input: "The '''''dog''''''s bone"
    out:
        type: document
        position: {} 
        content: 
          - type: paragraph
            position: {}
            content: 
              - type: text
                position: {}
                text: "The "
              - type: formatted
                position: {}
                markup: bold
                content: 
                  - type: formatted
                    position: {}
                    markup: italic
                    content: 
                      - type: text
                        position: {} 
                        text: "dog"
              - type: text
                position: {}
                text: "\'s bone"
                
# A simple inline math tag.
  - case: simple inline math
    input: "<math>x^2</math>"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: math
              content:
                - type: text
                  position: {}
                  text: x^2

# Math tag with special characters
  - case: special inline math
    input: "<math>$\\{{bla}} x'=c</math>"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: math
              content:
                - type: text
                  position: {}
                  text: "$\\{{bla}} x'=c"

# An empty math tag.
  - case: empty math
    input: "<math></math>"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: math
              content: []

# Simple hyperlink without a caption.
  - case: hyperlink without caption
    input: "[https://www.example.com/]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: externalreference
              position: {}
              target: https://www.example.com/
              caption: []

# Simple hyperlink with a caption.
  - case: hyperlink with caption
    input: "[https://www.example.com/ Example dot com]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: externalreference
              position: {}
              target: https://www.example.com/
              caption:
                - type: text
                  position: {}
                  text: "Example dot com"

# Simple hyperlink without a caption.
  - case: hyperlink with formatted caption
    input: "[https://www.example.com/ Example '''dot com''']"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: externalreference
              position: {}
              target: https://www.example.com/
              caption:
                - type: text
                  position: {}
                  text: "Example "

                - type: formatted
                  position: {}
                  markup: bold
                  content:
                    - type: text
                      position: {}
                      text: dot com

# An arbitrary html tag
  - case: nested html tag
    input: |
      <translate language="test" attr2=bla attröbüte='this is a "test"'><translate >Fréttinga is a small municipality in MungoLand.< / translate></translate>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: htmltag
              position: {}
              name: translate
              attributes:
                - position: {}
                  key: language
                  value: test
                - position: {}
                  key: attr2
                  value: bla
                - position: {}
                  key: attröbüte
                  value: "this is a \"test\""
              content:
                - type: htmltag
                  position: {}
                  name: translate
                  attributes: []
                  content:
                    - type: text
                      position: {}
                      text: "Fréttinga is a small municipality in MungoLand."
              
# An empty nowiki tag
  - case: empty nowiki
    input: "<nowiki></nowiki>"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: nowiki
              content: []
              
# A HTML comment
  - case: html comment
    input: "bla <!-- comment ³½}³¹ðđ æđ||đð@³¼¶²{{}} content -->"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: text
              position: {}
              text: "bla "
            - type: comment
              position: {}
              text: " comment ³½}³¹ðđ æđ||đð@³¼¶²{{}} content "
              
# The nowiki tag should ignore everything.
  - case: nowiki
    input: |
        <nowiki>abc {{bla}} ''' 
        <another> [</nowiki>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: nowiki
              content:
                - type: text
                  position: {}
                  text: "abc {{bla}} ''' \n<another> ["

# Strikethrough text.
  - case: strikethrough
    input: |
      <del>strikethrough text</del>
      <s>strikethrough text</s>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: strikethrough
              content:
                - type: text
                  position: {}
                  text: strikethrough text
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: strikethrough
              content:
                - type: text
                  position: {}
                  text: strikethrough text
                      
# Definition markup
  - case: definition markup
    input: <dfn title="Riemannsumme">Riemannsumme</dfn>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: htmltag
              position: {}
              name: dfn
              attributes:
                - key: title
                  value: Riemannsumme
                  position: {}
              content:
                - type: text
                  position: {}
                  text: Riemannsumme
                      
# Underline text
  - case: underline markup
    input: <ins>Inserted</ins>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: underline
              content:
                - type: text
                  position: {}
                  text: Inserted
                      
# Fixed-width text
  - case: fixed width markup
    input: <code>Fixed width text</code>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: code
              content:
                - type: text
                  position: {}
                  text: Fixed width text
                      
# Blockquote
  - case: blockquote markup
    input: <blockquote>Blockquote</blockquote>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: blockquote
              content:
                - type: text
                  position: {}
                  text: Blockquote
                      
# Pre-formatted Text
  - case: pre formatted text
    input: |
      <pre>Text is '''preformatted''' and 
      ''markups'' '''''cannot''''' be done</pre>
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: formatted
              position: {}
              markup: preformatted
              content:
                - type: text
                  position: {}
                  text: "Text is '''preformatted''' and \n''markups'' '''''cannot''''' be done"
                      
# A simple list of one item.
  - case: list one item
    input: "* item"
    out:
      type: document
      position: {}
      content:
        - type: list
          position: {}
          content:
            - type: listitem
              position: {}
              kind: unordered
              depth: 1
              content:
                - type: text
                  position: {}
                  text: item


# A ordered list and a unordered list of one item
  - case: two simple lists
    input: |
        * item 1
        
        ## item 2
    out:
      type: document
      position: {}
      content:
        - type: list
          position: {}
          content:
            - type: listitem
              position: {}
              kind: unordered
              depth: 1
              content:
                - type: text
                  position: {}
                  text: item 1
        - type: list
          position: {}
          content:
            - type: listitem
              position: {}
              kind: ordered
              depth: 2
              content:
                - type: text
                  position: {}
                  text: item 2


# Star, Fence, Semicolon should be considered as text in an inline context.
  - case: list symbols inline context
    input: |
        * item 1 #;* bla
        abc # def *
    out:
      type: document
      position: {}
      content:
        - type: list
          position: {}
          content:
            - type: listitem
              position: {}
              kind: unordered
              depth: 1
              content:
                - type: text
                  position: {}
                  text: "item 1 #;* bla"
        - type: paragraph
          position: {}
          content:
            - type: text
              position: {}
              text: "abc # def *"

# A list with multiple different item types and a paragraph
  - case: list diverse items
    input: |
        : item 1
        ; item 11
        *** item 2
        ## item 3
        paragraph
    out:
      type: document
      position: {}
      content:
        - type: list
          position: {}
          content:
            - type: listitem
              position: {}
              kind: definition
              depth: 1
              content:
                - type: text
                  position: {}
                  text: item 1
            - type: listitem
              position: {}
              kind: definitionterm
              depth: 1
              content:
                - type: text
                  position: {}
                  text: item 11
            - type: listitem
              position: {}
              kind: unordered
              depth: 3
              content:
                - type: text
                  position: {}
                  text: item 2
            - type: listitem
              position: {}
              kind: ordered
              depth: 2
              content:
                - type: text
                  position: {}
                  text: item 3
        - type: paragraph
          position: {}
          content:
            - type: text
              position: {}
              text: paragraph

# A very simple template
  - case: simple template
    input: "{{name}}"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: template
              position: {}
              name: name
              content: []


# A sequence of unnamed template arguments
  - case: anonymous attribute sequence
    input: |
        {{templatename
        |attribute2
        |attribute3
        |attribute4
        }}
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: template
              position: {}
              name: templatename
              content:
                - type: templateargument
                  position: {}
                  name: ""
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: attribute2
                - type: templateargument
                  position: {}
                  name: ""
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: attribute3
                - type: templateargument
                  position: {}
                  name: ""
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: attribute4

# A named argument
  - case: named argument
    input: "{{name|caption=üäö test}}"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: template
              position: {}
              name: name
              content:
                - type: templateargument
                  position: {}
                  name: caption
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: üäö test

# Multiple named template arguments
  - case: multiple named template arguments
    input: "{{templatename|item2=2|item3=3|item4=4}}"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: template
              position: {}
              name: templatename
              content:
                - type: templateargument
                  position: {}
                  name: item2
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "2"
                - type: templateargument
                  position: {}
                  name: item3
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "3"
                - type: templateargument
                  position: {}
                  name: item4
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "4"

# Mixed named and unnamed arguments
  - case: mixed template arguments
    input: "{{template1|item2=2|item3=3|item4}}"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: template
              position: {}
              name: "template1"
              content:
                - type: templateargument
                  position: {}
                  name: item2
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "2"
                - type: templateargument
                  position: {}
                  name: item3
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "3"
                - type: templateargument
                  position: {}
                  name: ""
                  value:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "item4"

# A simple internal reference
  - case: simple internal ref
    input: "[[File:Abc]]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: internalreference
              position: {}
              target: 
                - type: text
                  position: {}
                  text: File:Abc
              options: []
              caption: []

# An empty internal reference
  - case: empty internal ref
    input: "[[]]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: internalreference
              position: {}
              target: []
              options: []
              caption: []

# A simple internal reference with caption
  - case: internal ref with caption
    input: "[[File:Abc|this is a caption]]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: internalreference
              position: {}
              target: 
                - type: text
                  position: {}
                  text: File:Abc
              options: []
              caption: 
                - type: text
                  position: {}
                  text: this is a caption

# A simple internal reference with options
  - case: internal ref with options
    input: "[[File:Abc|opt1=value1|opt2=123|this is a caption with '''bold and |special|''' markup]]"
    out:
      type: document
      position: {}
      content:
        - type: paragraph
          position: {}
          content:
            - type: internalreference
              position: {}
              target: 
                - type: text
                  position: {}
                  text: "File:Abc"
              options: 
                - - type: text
                    position: {}
                    text: "opt1=value1"
                - - type: text
                    position: {}
                    text: "opt2=123"
              caption: 
                - type: text
                  position: {}
                  text: "this is a caption with "
                - type: formatted
                  position: {}
                  markup: bold
                  content:
                    - type: text
                      position: {}
                      text: "bold and |special|"
                - type: text
                  position: {}
                  text: " markup"                     

# Simple table with one cell
  - case: single cell table
    input: |
        {|
        | attributevalue = "test" | test
        |}
    out:
      type: document
      position: {}
      content:
        - type: table
          position: {}
          attributes: []
          caption_attributes: []
          caption: []
          rows:
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  attributes: 
                    - position: {}
                      key: attributevalue
                      value: test
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: test
        - type: paragraph
          position: {}
          content: []
 
 
 # Simple table with caption
  - case: table caption
    input: |
        {|
        |+ caption_attribute=value | this is a ''caption''
        | attributevalue = "test" | test
        |}
    out:
      type: document
      position: {}
      content:
        - type: table
          position: {}
          attributes: []
          caption_attributes:
            - position: {}
              key: caption_attribute
              value: value
          caption:
            - type: paragraph
              position: {}
              content:
                - type: text
                  position: {}
                  text: "this is a "
                - type: formatted
                  position: {}
                  markup: italic
                  content:
                    - type: text
                      position: {}
                      text: "caption"
          rows:
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  attributes:
                    - position: {}
                      key: attributevalue 
                      value: test
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: test
        - type: paragraph
          position: {}
          content: []
          
 # Table with multiple rows
  - case: multi row table
    input: |
        {| class="wikitable"
        |+ caption
        |-
        | attributevalue = "test" | test
        |-
        | test ''2''
        |-style="font-style: italic; color: green;"
        | test3
        | attr4=val | test4
        |}
    out:
      type: document
      position: {}
      content:
        - type: table
          position: {}
          attributes: 
            - position: {}
              key: class
              value: wikitable
          caption_attributes: []
          caption:
            - type: paragraph
              position: {}
              content:
                - type: text
                  position: {}
                  text: caption
          rows:
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  attributes: 
                    - position: {}
                      key: attributevalue
                      value: test
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: test
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  attributes: []
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: "test "
                        - type: formatted
                          position: {}
                          markup: italic
                          content:
                            - type: text
                              position: {}
                              text: "2"
            - type: tablerow
              position: {}
              attributes: 
                - position: {}
                  key: style
                  value: "font-style: italic; color: green;"
              cells:
                - type: tablecell
                  position: {}
                  attributes: []
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: "test3"
                - type: tablecell
                  position: {}
                  attributes:
                    - position: {}
                      key: attr4
                      value: val
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: "test4"
        - type: paragraph
          position: {}
          content: []
          
# Table with multiple cells on one line
  - case: table inline cells
    input: |
        {|
        | attributevalue = "test" | test || cell 2 || attribute=3 | cell 3
        |}
    out:
      type: document
      position: {}
      content:
        - type: table
          position: {}
          attributes: []
          caption_attributes: []
          caption: []
          rows:
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  attributes: 
                    - position: {}
                      key: attributevalue
                      value: test
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: "test "
                - type: tablecell
                  position: {}
                  attributes: []
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: "cell 2 "
                - type: tablecell
                  position: {}
                  attributes: 
                    - position: {}
                      key: attribute
                      value: "3"
                  header: false
                  content:
                    - type: paragraph
                      position: {}
                      content: 
                        - type: text
                          position: {}
                          text: cell 3
        - type: paragraph
          position: {}
          content: []
          
# Table with header cells
  - case: table header cells
    input: |
        {|
        !  Orange !! attribute="test" | Apple
        |-
        |  Bread  || Pie !! ''hey!!''
        ! footer
        |}
    out:
      type: document
      position: {}
      content:
        - type: table
          position: {}
          attributes: []
          caption_attributes: []
          caption: []
          rows:
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  header: true
                  attributes: []
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "Orange "
                - type: tablecell
                  position: {}
                  header: true
                  attributes: 
                    - position: {}
                      key: attribute
                      value: test
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: Apple
            - type: tablerow
              position: {}
              attributes: []
              cells:
                - type: tablecell
                  position: {}
                  header: false
                  attributes: []
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "Bread  "
                - type: tablecell
                  position: {}
                  header: false
                  attributes: []
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: "Pie "
                - type: tablecell
                  position: {}
                  header: true
                  attributes: []
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: formatted
                          position: {}
                          markup: italic
                          content:
                            - type: text
                              position: {}
                              text: "hey!!"
                - type: tablecell
                  position: {}
                  header: true
                  attributes: []
                  content:
                    - type: paragraph
                      position: {}
                      content:
                        - type: text
                          position: {}
                          text: footer
        - type: paragraph
          position: {}
          content: []
